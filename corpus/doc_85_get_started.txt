Skip to main content🦜️🔗 LangChainJS/TS DocsGitHubCTRLKGet startedIntroductionInstallationQuickstartModulesModel I/​OData connectionDocument loadersDocument transformersText embedding modelsVector storesRetrieversHow-toIntegrationsChainsMemoryAgentsCallbacksModulesUse casesGuidesEcosystemAdditional resourcesAPI referenceModulesData connectionRetrieversOn this pageRetrieversA retriever is an interface that returns documents given an unstructured query. It is more general than a vector store.
A retriever does not need to be able to store documents, only to return (or retrieve) it. Vector stores can be used
as the backbone of a retriever, but there are other types of retrievers as well.Get started​The BaseRetriever class in LangChain is as follows:from abc import ABC, abstractmethodfrom typing import Listfrom langchain.schema import Documentclass BaseRetriever(ABC):    @abstractmethod    def get_relevant_documents(self, query: str) -> List[Document]:        """Get texts relevant for a query.        Args:            query: string to find relevant texts for        Returns:            List of relevant documents        """It's that simple! The get_relevant_documents method can be implemented however you see fit.Of course, we also help construct what we think useful Retrievers are. The main type of Retriever that we focus on is a Vectorstore retriever. We will focus on that for the rest of this guide.In order to understand what a vectorstore retriever is, it's important to understand what a Vectorstore is. So let's look at that.By default, LangChain uses Chroma as the vectorstore to index and search embeddings. To walk through this tutorial, we'll first need to install chromadb.pip install chromadbThis example showcases question answering over documents.